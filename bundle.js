(()=>{"use strict";const n={carsPage:1,cars:[],carsCount:1,winnersPage:1,winners:[],winnersCount:0,view:"garagePage",sortBy:null,sortOrder:null,selectedCarID:null,animation:[]};const e=()=>{return e=void 0,t=void 0,o=function*(){const e=document.getElementById("prev"),t=document.getElementById("next"),i="garagePage"===n.view?n.carsPage:n.winnersPage,o="garagePage"===n.view?n.carsCount:n.winnersCount;t.disabled=i*("garagePage"===n.view?7:10)>=o,e.disabled=i<=1},new((i=void 0)||(i=Promise))((function(n,r){function c(n){try{d(o.next(n))}catch(n){r(n)}}function a(n){try{d(o.throw(n))}catch(n){r(n)}}function d(e){var t;e.done?n(e.value):(t=e.value,t instanceof i?t:new i((function(n){n(t)}))).then(c,a)}d((o=o.apply(e,t||[])).next())}));var e,t,i,o};var t=function(n,e,t,i){return new(t||(t=Promise))((function(o,r){function c(n){try{d(i.next(n))}catch(n){r(n)}}function a(n){try{d(i.throw(n))}catch(n){r(n)}}function d(n){var e;n.done?o(n.value):(e=n.value,e instanceof t?e:new t((function(n){n(e)}))).then(c,a)}d((i=i.apply(n,e||[])).next())}))};const i="https://flint-brazen-catshark.glitch.me/",o=`${i}/garage`,r=`${i}/engine`,c=`${i}/winners`,a=n=>t(void 0,void 0,void 0,(function*(){try{const e=yield fetch(`${o}/${n}`);if(!e.ok)throw new Error("Failed to fetch car");return yield e.json()}catch(n){throw new Error(`Failed fetching car by ID: ${n}`)}})),d=n=>t(void 0,void 0,void 0,(function*(){try{const e=yield fetch(`${o}`,{method:"POST",body:JSON.stringify(n),headers:{"Content-Type":"application/json"}});if(!e.ok)throw new Error("Failed to create car");return yield e.json()}catch(n){throw new Error(`Failed in creating car: ${n}`)}})),s=(n,e)=>t(void 0,void 0,void 0,(function*(){try{const t=yield fetch(`${o}/${e}`,{method:"PUT",body:JSON.stringify(n),headers:{"Content-Type":"application/json"}});if(!t.ok)throw new Error("Failed to update car");return yield t.json()}catch(n){throw new Error(`Failed in car updating by ID ${e}: ${n}`)}})),l=n=>t(void 0,void 0,void 0,(function*(){try{const e=yield fetch(`${c}/${n}`);if(!e.ok)throw new Error(`Failed to fetch winner with ID ${n}`);return yield e.json()}catch(e){throw new Error(`Error fetching winner with ID ${n}: ${e}`)}}));function u(n){const{left:e,width:t}=n.getBoundingClientRect();return e+t}const v=e=>{return i=void 0,o=void 0,a=function*(){var i;const o=document.getElementById(`start-engine-car-${e}`),c=document.getElementById(`stop-engine-car-${e}`);o.disabled=!0;const{velocity:a,distance:d}=yield(n=>t(void 0,void 0,void 0,(function*(){try{const e=yield fetch(`${r}?id=${n}&status=started`,{method:"PATCH"});if(!e.ok)throw new Error("Failed to start car");return yield e.json()}catch(e){throw new Error(`Error starting car with ID ${n}:: ${e}`)}})))(e),s=Math.round(d/a);c.disabled=!1;const l=document.getElementById(`car-${e}`),v=document.getElementById(`flag-${e}`),f=document.getElementById(`engine-broke-${e}`),h=function(n,e,t){const i={id:0},o=performance.now();return i.id=window.requestAnimationFrame((function r(){return c=this,a=void 0,s=function*(){const c=performance.now(),a=Math.round(e/t*(c-o));n.style.transform=`translateX(${Math.min(a,e)}px)`,a<e&&(i.id=window.requestAnimationFrame(r))},new((d=void 0)||(d=Promise))((function(n,e){function t(n){try{o(s.next(n))}catch(n){e(n)}}function i(n){try{o(s.throw(n))}catch(n){e(n)}}function o(e){var o;e.done?n(e.value):(o=e.value,o instanceof d?o:new d((function(n){n(o)}))).then(t,i)}o((s=s.apply(c,a||[])).next())}));var c,a,d,s})),i}(l,Math.floor(function(n,e){const t=u(n);return u(e)-t}(l,v)+90),s);n.animation[e]=h;const y=yield(n=>t(void 0,void 0,void 0,(function*(){try{const e=yield fetch(`${r}?id=${n}&status=drive`,{method:"PATCH"});if(!e.ok)throw new Error("Failed to drive car");return Object.assign(Object.assign({},yield e.json()),{success:!0})}catch(e){return console.error(`Error driving car with ID ${n}:`,e),{success:!1}}})))(e),{success:m}=y;if(!m){const n=document.getElementById(`car-road-${e}`);window.cancelAnimationFrame(h.id),n.style.backgroundColor="palevioletred",f.style.display="block";const t=(null===(i=n.querySelector(".car-name"))||void 0===i?void 0:i.textContent)||"";f.innerHTML=`${t} is out of race because the engine was broken down`}return{success:m,id:e,time:s}},new((c=void 0)||(c=Promise))((function(n,e){function t(n){try{d(a.next(n))}catch(n){e(n)}}function r(n){try{d(a.throw(n))}catch(n){e(n)}}function d(e){var i;e.done?n(e.value):(i=e.value,i instanceof c?i:new c((function(n){n(i)}))).then(t,r)}d((a=a.apply(i,o||[])).next())}));var i,o,c,a};const f=e=>{return i=void 0,o=void 0,a=function*(){const i=document.getElementById(`start-engine-car-${e}`),o=document.getElementById(`stop-engine-car-${e}`),c=document.getElementById(`car-road-${e}`),a=document.getElementById(`engine-broke-${e}`);o.disabled=!0,yield(n=>t(void 0,void 0,void 0,(function*(){try{const e=yield fetch(`${r}?id=${n}&status=stopped`,{method:"PATCH"});if(!e.ok)throw new Error("Failed to stop car");return yield e.json()}catch(e){throw new Error(`Error stopping car with ID ${n}: ${e}`)}})))(e),c.style.backgroundColor="transparent",a.style.display="none",i.disabled=!1,document.getElementById(`car-${e}`).style.transform="translateX(0)",n.animation[e]&&(window.cancelAnimationFrame(n.animation[e].id),delete n.animation[e])},new((c=void 0)||(c=Promise))((function(n,e){function t(n){try{d(a.next(n))}catch(n){e(n)}}function r(n){try{d(a.throw(n))}catch(n){e(n)}}function d(e){var i;e.done?n(e.value):(i=e.value,i instanceof c?i:new c((function(n){n(i)}))).then(t,r)}d((a=a.apply(i,o||[])).next())}));var i,o,c,a},h=n=>`<svg version="1.0" xmlns="http://www.w3.org/2000/svg"\nwidth="80pt" height="30pt" viewBox="0 0 1280.000000 640.000000"\npreserveAspectRatio="xMidYMid meet">\n<g transform="translate(0.000000,640.000000) scale(0.100000,-0.100000)"\nfill="#686868" stroke="none">\n<path fill="${n}" d="M3565 5336 c-106 -30 -101 -26 -108 -111 -4 -42 -9\n-80 -12 -85 -6 -10 -246 -105 -590 -234 -448 -167 -1052 -415 -1173 -483 -78\n-43 -193 -91 -250 -104 -23 -5 -98 -14 -165 -19 -67 -6 -167 -19 -222 -30 -154\n-31 -340 -49 -563 -57 l-203 -6 -43 -66 c-59 -91 -60 -95 -26 -130 37 -37 38 -65 3\n-150 -25 -62 -27 -78 -31 -256 l-4 -190 -38 -32 c-91 -78 -133 -209 -134 -418\n0 -194 11 -396 26 -482 13 -71 14 -74 72 -122 69 -58 130 -129 158 -184 64\n-126 534 -211 1384 -250 l92 -4 -6 119 c-6 142 8 256 49 383 112 352 394 622\n756 722 90 26 112 28 278 28 165 0 188 -2 278 -27 201 -56 361 -152 504 -302\n140 -145 222 -293 274 -492 21 -79 24 -109 23 -279 -1 -127 -6 -214 -16 -263\nl-15 -73 3006 7 c1653 4 3007 8 3009 9 1 1 -8 37 -20 81 -19 67 -22 105 -22\n259 -1 166 1 187 27 279 117 421 467 736 885 797 119 17 325 7 432 -21 239\n-63 453 -205 601 -399 70 -92 154 -267 185 -386 24 -88 27 -119 27 -260 1\n-116 -4 -181 -16 -234 -10 -41 -16 -75 -15 -76 2 -1 62 2 133 6 266 16 458 45\n525 79 48 24 97 81 127 146 l24 52 -16 157 c-15 152 -15 163 4 284 63 388 50\n680 -35 802 -134 193 -526 336 -1429 519 -737 149 -1322 209 -2033 210 -228 0\n-226 0 -347 85 -187 131 -1045 607 -1471 815 -383 187 -788 281 -1439 332\n-208 17 -1106 16 -1400 0 -121 -7 -314 -19 -430 -27 -302 -22 -286 -22 -341\n10 -140 81 -187 94 -269 71z m1885 -333 c6 -37 38 -238 71 -446 32 -209 66\n-422 75 -474 9 -52 15 -96 13 -97 -11 -9 -1699 29 -1951 44 -206 13 -417 36\n-485 54 -98 26 -198 119 -249 231 -35 75 -36 172 -5 255 17 45 30 61 68 86 83\n54 135 80 253 127 341 136 858 230 1460 267 269 16 270 16 511 18 l227 2 12\n-67z m630 47 c264 -18 777 -110 1029 -186 186 -56 445 -188 756 -387 211 -134\n274 -181 250 -185 -75 -12 -133 -50 -162 -106 -19 -35 -21 -136 -4 -179 l11\n-27 -907 2 -906 3 -59 160 c-110 302 -298 878 -298 916 0 6 95 2 290 -11z"/>\n<path d="M2633 3125 c-223 -40 -410 -141 -568 -306 -132 -138 -213 -283 -262\n-467 -22 -83 -26 -119 -26 -247 -1 -169 10 -236 65 -382 87 -230 271 -436 493\n-551 85 -44 178 -78 271 -98 107 -23 312 -23 419 1 392 84 699 375 802 761 23\n86 26 120 27 254 1 158 -5 199 -46 330 -98 310 -355 567 -668 669 -150 50\n-354 64 -507 36z m350 -301 c249 -56 457 -247 543 -499 25 -72 28 -95 28 -220\n1 -153 -15 -228 -74 -345 -94 -186 -283 -337 -485 -386 -96 -24 -268 -24 -360\n0 -320 84 -544 355 -562 681 -20 359 209 673 558 765 94 24 253 26 352 4z"/>\n<path d="M2600 2697 c-36 -13 -85 -36 -109 -51 l-44 -28 116 -115 c81 -82 120\n-114 131 -110 14 6 16 29 16 167 0 186 6 178 -110 137z"/>\n<path d="M2920 2561 c0 -139 2 -162 16 -168 11 -4 50 28 130 108 l115 114 -28\n22 c-34 28 -138 70 -193 79 l-40 7 0 -162z"/>\n<path d="M2282 2448 c-28 -36 -92 -191 -92 -225 0 -10 34 -13 165 -13 151 0\n165 1 165 18 0 15 -206 232 -221 232 -4 0 -11 -6 -17 -12z"/>\n<path d="M3222 2351 c-62 -59 -112 -115 -112 -124 0 -15 17 -17 165 -17 131 0\n165 3 165 13 0 40 -69 205 -95 227 -7 6 -48 -27 -123 -99z"/>\n<path d="M2781 2332 c-12 -22 11 -62 34 -62 8 0 21 10 29 22 20 28 4 58 -29 58 \n-13 0 -29 -8 -34 -18z"/>\n<path d="M2749 2161 c-32 -33 -37 -67 -14 -110 29 -57 104 -64 151 -14 53 57 9 \n153 -71 153 -27 0 -44 -8 -66 -29z"/>\n<path d="M2570 2125 c-26 -32 13 -81 48 -59 24 16 27 45 6 61 -23 17 -39 16 -54 -2z"/>\n<path d="M3006 2124 c-20 -19 -20 -38 -2 -54 23 -19 61 -8 64 18 7 44 -32 67 -62 36z"/>\n<path d="M2190 1975 c0 -29 41 -140 72 -194 l31 -53 117 117 c71 71 116 123 113 \n131 -4 11 -40 14 -169 14 -141 0 -164 -2 -164 -15z"/>\n<path d="M3110 1972 c0 -9 51 -68 114 -131 l114 -114 31 54 c30 51 71 165 71 195 \n0 11 -31 14 -165 14 -151 0 -165 -1 -165 -18z"/>\n<path d="M2780 1901 c-7 -15 -5 -24 8 -41 32 -40 85 -4 62 41 -14 25 -56 25 -70 0z"/>\n<path d="M2562 1697 c-61 -62 -112 -115 -112 -119 0 -18 208 -108 249 -108 7\n0 11 54 11 164 0 140 -2 165 -16 170 -9 3 -16 6 -17 6 -1 0 -53 -51 -115 -113z"/>\n<path d="M2933 1803 c-15 -6 -19 -333 -4 -333 46 0 251 88 251 108 0 9 -223 232 \n-230 231 -3 0 -11 -3 -17 -6z"/>\n<path d="M10700 3119 c-390 -84 -696 -376 -797 -759 -31 -117 -41 -292 -24 -411 \n33 -227 150 -453 318 -609 267 -250 643 -344 993 -249 117 32 283 118 380 196 \n487 396 518 1128 67 1560 -97 93 -166 140 -290 198 -137 64 -235 86 -407 91 -120 \n3 -162 0 -240 -17z m445 -313 c238 -81 409 -258 486 -506 30 -96 33 -289 5 -388 \n-110 -400 -513 -637 -911 -536 -149 38 -313 147 -402 267 -176 238 -203 533 -71 \n797 34 69 60 103 138 180 77 78 111 104 181 139 129 65 207 81 364 77 109 -3 143 -7 210 -30z"/>\n<path d="M10703 2700 c-54 -19 -153 -71 -153 -80 0 -3 51 -57 114 -119 80 -80 \n119 -112 130 -108 14 5 16 29 16 167 l0 160 -27 -1 c-16 0 -52 -9 -80 -19z"/>\n<path d="M11020 2561 c0 -139 2 -162 16 -168 22 -8 247 216 234 232 -17 20 -163 \n84 -207 91 l-43 7 0 -162z"/>\n<path d="M10366 2424 c-29 -44 -76 -165 -76 -194 0 -19 7 -20 165 -20 126 0 165 \n3 165 13 0 7 -51 63 -114 126 l-114 114 -26 -39z"/>\n<path d="M11313 2348 c-61 -62 -109 -119 -106 -125 6 -15 333 -19 333 -4 0 45 -88 \n241 -108 241 -4 0 -57 -51 -119 -112z"/>\n<path d="M10882 2338 c-17 -17 -15 -32 7 -52 16 -14 23 -15 41 -6 31 17 24 64 -10 \n68 -14 2 -31 -3 -38 -10z"/>\n<path d="M10846 2159 c-68 -81 17 -194 110 -144 89 48 56 175 -46 175 -30 0 -44 \n-6 -64 -31z"/>\n<path d="M10670 2126 c-19 -23 -8 -61 18 -64 44 -7 67 32 36 62 -19 20 -38 20 -54 2z"/>\n<path d="M11106 2127 c-21 -16 -18 -45 7 -61 37 -23 77 35 41 61 -10 7 -21 13 -24 \n13 -3 0 -14 -6 -24 -13z"/>\n<path d="M10290 1970 c0 -29 43 -141 74 -195 l28 -48 116 116 c81 81 113 120 109 \n131 -6 14 -29 16 -167 16 -152 0 -160 -1 -160 -20z"/>\n<path d="M11207 1978 c-3 -7 47 -66 111 -130 l116 -118 27 43 c27 44 79 177 79 203 \n0 12 -28 14 -164 14 -122 0 -166 -3 -169 -12z"/>\n<path d="M10881 1901 c-14 -25 -5 -48 20 -56 27 -9 51 13 47 44 -4 34 -51 43 -67 12z"/> \n<path d="M10662 1697 c-61 -62 -112 -115 -112 -119 0 -20 201 -108 247 -108 10 0 13 \n34 13 164 0 140 -2 165 -16 170 -9 3 -16 6 -17 6 -1 0 -53 -51 -115 -113z"/> \n<path d="M11033 1803 c-10 -3 -13 -47 -13 -169 0 -90 4 -164 8 -164 36 0 186 61 239 \n98 16 10 -216 242 -234 235z"/> </g>\n</svg>`,y=()=>`\n<div class="garage-heading">\n  <div>Cars in garage: ${n.carsCount}</div>\n  <div>Page № ${n.carsPage}</div>\n</div>\n  ${n.cars.map((n=>`\n<div class="car-container" id="car-road-${n.id}">\n  <div class="controll-buttons">\n    <button class="select-btn" id="select-car-${n.id}">Select</button>\n    <button class="remove-btn" id="remove-car-${n.id}">Remove</button>\n    <span class="car-name">${n.name}</span>\n    <button class="start-engine-btn" id="start-engine-car-${n.id}">Start</button>\n    <button class="stop-engine-btn" id="stop-engine-car-${n.id}" disabled>Stop</button>\n  </div>\n\n  <div class="road">\n    <div class="car" id="car-${n.id}">${h(n.color)}</div>\n    <div class="flag" id="flag-${n.id}">&#127937;</div>\n  </div>\n  <div id="engine-broke-${n.id}" class = "message" display="none"></div>\n</div>`)).join("")}\n<p class="winner-mesage" id="winner-mesage"></p>  \n`,m=()=>`\n<div class="winners-heading">\n<div>Winners: ${n.winnersCount}</div>\n<div>Page № ${n.winnersPage}</div>\n</div>\n  <table cellspacing ="3" border="0" cellpadding="3" >\n    <thead>\n      <th>№</th>\n      <th>Car</th>\n      <th>Name</th>\n      <th class="sort-by-btn" id="sort-by-wins">Wins</th>\n      <th class="sort-by-btn" id="sort-by-time">Best time(seconds)</th>\n    </thead>\n    <tbody>\n    ${n.winners.map(((n,e)=>`\n        <tr>\n          <td>${e+1}</td>\n          <td>${h(n.car.color)}</td>\n          <td>${n.car.name}</td>\n          <td>${n.wins}</td>\n          <td>${n.time}</td>\n        </tr>\n        `)).join(" ")}\n    </tbody>\n  </table>`;var w=function(n,e,t,i){return new(t||(t=Promise))((function(o,r){function c(n){try{d(i.next(n))}catch(n){r(n)}}function a(n){try{d(i.throw(n))}catch(n){r(n)}}function d(n){var e;n.done?o(n.value):(e=n.value,e instanceof t?e:new t((function(n){n(e)}))).then(c,a)}d((i=i.apply(n,e||[])).next())}))};const p=()=>w(void 0,void 0,void 0,(function*(){try{const{items:e,count:i}=yield((n,...e)=>t(void 0,[n,...e],void 0,(function*(n,e=10){try{const t=yield fetch(`${o}?_page=${n}&_limit=${e}`);if(!t.ok)throw new Error("Failed to fetch cars");const i=Number(t.headers.get("X-Total-Count"));return{items:yield t.json(),count:i}}catch(n){throw new Error(`Failed to fetch cars: ${n}`)}})))(n.carsPage);n.cars=e,n.carsCount=i}catch(n){throw n}})),g=()=>w(void 0,void 0,void 0,(function*(){try{const{items:e,count:i}=yield((n,e,i,...o)=>t(void 0,[n,e,i,...o],void 0,(function*(n,e,i,o=7){try{const r=yield fetch(`${c}?_page=${n}&_limit=${o}&${((n,e)=>n&&e?`&_sort=${n}&_order=${e}`:"")(e,i)}`);if(!r.ok)throw new Error("Failed to fetch winners");const d=yield r.json();return{items:yield Promise.all(d.map((n=>t(void 0,void 0,void 0,(function*(){return Object.assign(Object.assign({},n),{car:yield a(n.id)})}))))),count:r.headers.get("X-Total-Count")}}catch(n){throw new Error(`Error fetching winners: ${n}`)}})))(n.winnersPage,n.sortBy,n.sortOrder);n.winners=e,n.winnersCount=Number(i)}catch(n){throw n}}));var b=function(n,e,t,i){return new(t||(t=Promise))((function(o,r){function c(n){try{d(i.next(n))}catch(n){r(n)}}function a(n){try{d(i.throw(n))}catch(n){r(n)}}function d(n){var e;n.done?o(n.value):(e=n.value,e instanceof t?e:new t((function(n){n(e)}))).then(c,a)}d((i=i.apply(n,e||[])).next())}))};const E=["Porshe","Tesla","Kia","Peugeot","Honda","Jaguar","Mazda","Volvo","MINI","Toyota","SomeSuperFast"],$=["911","Model Y","Seltos","206","CR-V","F-PACE","CX-5","XC60","3-door","Corolla","SuperCar"],I=()=>`${E[Math.floor(Math.random()*$.length)]} ${$[Math.floor(Math.random()*$.length)]}`,M=()=>{let n="#";for(let e=0;e<6;e+=1)n+="0123456789ABCDEF"[Math.floor(16*Math.random())];return n};var B=function(n,e,t,i){return new(t||(t=Promise))((function(o,r){function c(n){try{d(i.next(n))}catch(n){r(n)}}function a(n){try{d(i.throw(n))}catch(n){r(n)}}function d(n){var e;n.done?o(n.value):(e=n.value,e instanceof t?e:new t((function(n){n(e)}))).then(c,a)}d((i=i.apply(n,e||[])).next())}))},P=function(n,e,t,i){return new(t||(t=Promise))((function(o,r){function c(n){try{d(i.next(n))}catch(n){r(n)}}function a(n){try{d(i.throw(n))}catch(n){r(n)}}function d(n){var e;n.done?o(n.value):(e=n.value,e instanceof t?e:new t((function(n){n(e)}))).then(c,a)}d((i=i.apply(n,e||[])).next())}))};var x=function(n,e,t,i){return new(t||(t=Promise))((function(o,r){function c(n){try{d(i.next(n))}catch(n){r(n)}}function a(n){try{d(i.throw(n))}catch(n){r(n)}}function d(n){var e;n.done?o(n.value):(e=n.value,e instanceof t?e:new t((function(n){n(e)}))).then(c,a)}d((i=i.apply(n,e||[])).next())}))};const L=()=>{n.sortOrder="asc"===n.sortOrder?"desc":"asc"},k=()=>x(void 0,void 0,void 0,(function*(){const e=document.getElementById("sort-by-wins"),t=document.getElementById("sort-by-time"),i=document.getElementById("winners");e&&e.addEventListener("click",(()=>x(void 0,void 0,void 0,(function*(){n.sortBy="wins",L(),yield g(),i&&(i.innerHTML=m()),yield k()})))),t&&t.addEventListener("click",(()=>x(void 0,void 0,void 0,(function*(){n.sortBy="time",L(),yield g(),i&&(i.innerHTML=m()),yield k()}))))}));var T=function(n,e,t,i){return new(t||(t=Promise))((function(o,r){function c(n){try{d(i.next(n))}catch(n){r(n)}}function a(n){try{d(i.throw(n))}catch(n){r(n)}}function d(n){var e;n.done?o(n.value):(e=n.value,e instanceof t?e:new t((function(n){n(e)}))).then(c,a)}d((i=i.apply(n,e||[])).next())}))},C=function(n,e,t,i){return new(t||(t=Promise))((function(o,r){function c(n){try{d(i.next(n))}catch(n){r(n)}}function a(n){try{d(i.throw(n))}catch(n){r(n)}}function d(n){var e;n.done?o(n.value):(e=n.value,e instanceof t?e:new t((function(n){n(e)}))).then(c,a)}d((i=i.apply(n,e||[])).next())}))};const z=(e,t)=>C(void 0,void 0,void 0,(function*(){const{success:i,id:o,time:r}=yield Promise.race(e);if(!i){const n=t.findIndex((n=>n===o));return e.splice(n,1),t.splice(n,1),e.length<1?null:z(e,t)}const c=n.cars.find((n=>n.id===o));return c?Object.assign(Object.assign({},c),{time:+(r/1e3).toFixed(2)}):null}));var F=function(n,e,t,i){return new(t||(t=Promise))((function(o,r){function c(n){try{d(i.next(n))}catch(n){r(n)}}function a(n){try{d(i.throw(n))}catch(n){r(n)}}function d(n){var e;n.done?o(n.value):(e=n.value,e instanceof t?e:new t((function(n){n(e)}))).then(c,a)}d((i=i.apply(n,e||[])).next())}))};const D=()=>F(void 0,void 0,void 0,(function*(){const e=document.getElementById("winners"),i=document.getElementById("reset");i.disabled=!1;const o=document.getElementById("race");o.addEventListener("click",(()=>F(void 0,void 0,void 0,(function*(){const r=document.getElementById("winner-mesage");i.disabled=!0,o.disabled=!0;const a=yield(d=v,C(void 0,void 0,void 0,(function*(){const e=n.cars.map((({id:n})=>d(n)));return yield z(e,n.cars.map((n=>n.id)))})));var d,s;a?(r&&(r.innerHTML=`${a.name} went first in ${a.time} seconds!`,r.classList.add("display")),yield(s=a,t(void 0,[s],void 0,(function*({id:n,time:e}){try{const o=yield(n=>t(void 0,void 0,void 0,(function*(){try{return(yield fetch(`${c}/${n}`)).status}catch(e){throw new Error(`Error fetching status for winner with ID ${n}: ${e}`)}})))(n);if(404===o)yield(i={id:n,wins:1,time:e},t(void 0,void 0,void 0,(function*(){try{const n=yield fetch(`${c}`,{method:"POST",body:JSON.stringify(i),headers:{"Content-Type":"application/json"}});if(!n.ok)throw new Error("Failed to create winner");return yield n.json()}catch(n){throw new Error(`Error creating winner: ${n}`)}})));else{const i=yield l(n);yield((n,e)=>t(void 0,void 0,void 0,(function*(){try{const t=yield fetch(`${c}/${n}`,{method:"PUT",body:JSON.stringify(e),headers:{"Content-Type":"application/json"}});if(!t.ok)throw new Error(`Failed to update winner with ID ${n}`);return yield t.json()}catch(e){throw new Error(`Error updating winner with ID ${n}: ${e}`)}})))(n,{id:n,wins:i.wins+1,time:e<i.time?e:i.time})}}catch(e){throw new Error(`Error saving winner with ID ${n}: ${e}`)}var i}))),yield g(),e&&(e.innerHTML=m()),yield k(),i.disabled=!1,o.disabled=!1):o.disabled=!1}))))}));var H=function(n,e,t,i){return new(t||(t=Promise))((function(o,r){function c(n){try{d(i.next(n))}catch(n){r(n)}}function a(n){try{d(i.throw(n))}catch(n){r(n)}}function d(n){var e;n.done?o(n.value):(e=n.value,e instanceof t?e:new t((function(n){n(e)}))).then(c,a)}d((i=i.apply(n,e||[])).next())}))};var j=function(n,e,t,i){return new(t||(t=Promise))((function(o,r){function c(n){try{d(i.next(n))}catch(n){r(n)}}function a(n){try{d(i.throw(n))}catch(n){r(n)}}function d(n){var e;n.done?o(n.value):(e=n.value,e instanceof t?e:new t((function(n){n(e)}))).then(c,a)}d((i=i.apply(n,e||[])).next())}))},O=function(n,e,t,i){return new(t||(t=Promise))((function(o,r){function c(n){try{d(i.next(n))}catch(n){r(n)}}function a(n){try{d(i.throw(n))}catch(n){r(n)}}function d(n){var e;n.done?o(n.value):(e=n.value,e instanceof t?e:new t((function(n){n(e)}))).then(c,a)}d((i=i.apply(n,e||[])).next())}))};const S=()=>{return i=void 0,r=void 0,h=function*(){O(void 0,void 0,void 0,(function*(){const t=document.getElementById("to-winners"),i=document.getElementById("to-garage"),o=document.getElementById("garage"),r=document.getElementById("winners"),c=document.getElementById("hide-panel-wrapper");t.addEventListener("click",(()=>O(void 0,void 0,void 0,(function*(){r.innerHTML=m(),o.innerHTML="",c.style.display="block",o.classList.add("moveleft"),n.view="winnersPage",e()})))),i.addEventListener("click",(()=>O(void 0,void 0,void 0,(function*(){o.innerHTML=y(),c.style.display="none",o.classList.remove("moveleft"),n.view="garagePage",e()}))))})),e(),P(void 0,void 0,void 0,(function*(){const n=document.getElementById("generator"),t=document.getElementById("garage");n&&n.addEventListener("click",(()=>P(void 0,void 0,void 0,(function*(){n.disabled=!0;const i=new Array(100).fill(0).map((()=>({name:I(),color:M()})));yield Promise.all(i.map((n=>P(void 0,void 0,void 0,(function*(){return d(n)}))))),yield p(),t&&(t.innerHTML=y()),n.disabled=!1,e()}))))})),T(void 0,void 0,void 0,(function*(){const t=document.getElementById("prev"),i=document.getElementById("next"),o=document.getElementById("garage"),r=document.getElementById("winners");t.addEventListener("click",(()=>T(void 0,void 0,void 0,(function*(){switch(n.view){case"garagePage":n.carsPage-=1,yield p(),o&&(o.innerHTML=y());break;case"winnersPage":n.winnersPage-=1,yield g(),r&&(r.innerHTML=m());break;default:throw new Error(`Unexpected view type received: ${n.view}`)}e(),yield k()})))),i.addEventListener("click",(()=>T(void 0,void 0,void 0,(function*(){switch(n.view){case"garagePage":n.carsPage+=1,yield p(),o&&(o.innerHTML=y());break;case"winnersPage":n.winnersPage+=1,yield g(),r&&(r.innerHTML=m());break;default:throw new Error(`Unexpected view type received: ${n.view}`)}e(),yield k()}))))})),k(),b(void 0,void 0,void 0,(function*(){const e=document.getElementById("update-name"),i=document.getElementById("update-color"),r=document.getElementById("update-btn"),d=document.getElementById("garage"),s=document.getElementById("winners");d.addEventListener("click",(u=>b(void 0,void 0,void 0,(function*(){const h=u.target;if(h.classList.contains("select-btn")){const t=Number(h.id.split("select-car-")[1]),o=yield a(t);n.selectedCarID=o.id,e.value=o.name,i.value=o.color,e.disabled=!1,i.disabled=!1,r.disabled=!1}if(h.classList.contains("remove-btn")){const n=Number(h.id.split("remove-car-")[1]);yield(n=>t(void 0,void 0,void 0,(function*(){try{if(!(yield fetch(`${o}/${n}`,{method:"DELETE"})).ok)throw new Error("Failed to delete car")}catch(n){throw new Error(`Failed to delite car by ID: ${n}`)}})))(n),(yield l(n))&&(yield(n=>t(void 0,void 0,void 0,(function*(){try{if(!(yield fetch(`${c}/${n}`,{method:"DELETE"})).ok)throw new Error(`Failed to delete winner with ID ${n}`)}catch(e){throw new Error(`Error deleting winner with ID ${n}: ${e}`)}})))(n),yield g(),s.innerHTML=m()),yield p(),d.innerHTML=y()}if(h.classList.contains("start-engine-btn")){const n=Number(h.id.split("start-engine-car-")[1]);v(n)}if(h.classList.contains("stop-engine-btn")){const n=Number(h.id.split("stop-engine-car-")[1]);f(n)}}))))})),D(),H(void 0,void 0,void 0,(function*(){const e=document.getElementById("reset");null==e||e.addEventListener("click",(()=>H(void 0,void 0,void 0,(function*(){const t=document.getElementById("race"),i=document.getElementById("winner-mesage");null==i||i.classList.remove("display"),e.disabled=!0,t.disabled=!0,n.cars.forEach((({id:n})=>{f(n)})),e.disabled=!1,t.disabled=!1}))))})),B(void 0,void 0,void 0,(function*(){document.getElementById("create-btn").addEventListener("click",(n=>B(void 0,void 0,void 0,(function*(){n.preventDefault();const t=document.getElementById("create-name"),i=document.getElementById("create-color"),o=document.getElementById("garage"),r={name:t.value,color:i.value};try{yield d(r),yield p(),o.innerHTML=y(),t.value=I(),i.value=M(),e()}catch(n){throw n}}))))})),j(void 0,void 0,void 0,(function*(){const e=document.getElementById("update-btn");e.addEventListener("click",(t=>j(void 0,void 0,void 0,(function*(){t.preventDefault();const i=document.getElementById("update-name"),o=document.getElementById("update-color"),r=document.getElementById("garage"),c=document.getElementById("winners"),a={name:i.value,color:o.value};if(null!==n.selectedCarID)try{yield s(a,n.selectedCarID),yield p(),yield g(),c.innerHTML=m(),r.innerHTML=y()}catch(n){throw n}i.disabled=!0,i.value="",o.disabled=!0,o.value="#ffe042",e.disabled=!0,n.selectedCarID=null}))))}))},new((u=void 0)||(u=Promise))((function(n,e){function t(n){try{c(h.next(n))}catch(n){e(n)}}function o(n){try{c(h.throw(n))}catch(n){e(n)}}function c(e){var i;e.done?n(e.value):(i=e.value,i instanceof u?i:new u((function(n){n(i)}))).then(t,o)}c((h=h.apply(i,r||[])).next())}));var i,r,u,h};const N=()=>{return n=void 0,e=void 0,i=function*(){const n=new DocumentFragment,e=document.createElement("main");e.classList.add("main"),e.innerHTML=`\n  <div class="navigation-panel wrapper">\n    <div class="nav-btn" id="to-garage">To Garage</div>\n    <div class="nav-btn" id="to-winners">To Winners</div>\n  </div>\n\n  <div class="action-panel wrapper">\n  <div class="hide-panel-wrapper" id="hide-panel-wrapper"></div>\n    <div class="forms">\n      <form action="" class="form" id="create">\n        <input type="text" class="input" id="create-name" value="">\n        <input type="color" class="color" id="create-color" value="#ffe042">\n        <button class="action-btn"  id="create-btn">Create</button>\n      </form>\n      <form action="" class="form" id="update">\n        <input type="text" class="input" id="update-name" name="name" disabled >\n        <input type="color" class="color" id="update-color" name="color" value="#ffe042" disabled>\n        <button class="action-btn" id="update-btn" "type="submit" disabled>Update</button>\n      </form>\n    </div>\n    <div class="race-controls">\n      <button class="action-btn race-btn" id="race">Race</button>\n      <button class="action-btn reset-btn" id="reset"  >Reset</button>\n      <button class="action-btn generator-btn" id="generator">Generate cars</button>\n    </div>\n  </div>\n\n  <div class="pagination-panel wrapper">\n    <button class="action-btn prev-btn" id="prev">PREV</button>\n    <button class="action-btn next-btn" id="next">NEXT</button>\n  </div>\n\n  <div class="main-panel wrapper">\n    <div class="main-screan-wrapper">\n      <div class="garage" id="garage">${y()}</div>\n      <div class="winners" id="winners">${m()}</div>\n    </div>\n  </div>\n  `,n.appendChild(e),document.body.innerHTML="",document.body.appendChild(n),document.getElementById("create-name").value=I()},new((t=void 0)||(t=Promise))((function(o,r){function c(n){try{d(i.next(n))}catch(n){r(n)}}function a(n){try{d(i.throw(n))}catch(n){r(n)}}function d(n){var e;n.done?o(n.value):(e=n.value,e instanceof t?e:new t((function(n){n(e)}))).then(c,a)}d((i=i.apply(n,e||[])).next())}));var n,e,t,i};var A,R;R=function*(){alert('By default, the app is configured to communicate with a remote server located at "https://flint-brazen-catshark.glitch.me/".\n    \n    Please note that the initial server response time may be around 20 seconds, so pls f5 the page.'),N(),yield w(void 0,void 0,void 0,(function*(){try{yield p(),yield g()}catch(n){throw n}})).then((()=>N())),S()},new((A=void 0)||(A=Promise))((function(n,e){function t(n){try{o(R.next(n))}catch(n){e(n)}}function i(n){try{o(R.throw(n))}catch(n){e(n)}}function o(e){var o;e.done?n(e.value):(o=e.value,o instanceof A?o:new A((function(n){n(o)}))).then(t,i)}o((R=R.apply(void 0,[])).next())}))})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,